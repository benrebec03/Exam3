//Rebeca Benitez 
//Exam 3

#include <iostream>
#include <fstream>
#include <iomanip>
using namespace std;
	
const int NUM_MONKEYS = 3;    
const int NUM_DAYS = 7;

// Function prototypes
void   getData(double[][NUM_DAYS]);
double findGroupTotal(double[][NUM_DAYS]);
double findOneTotal (double[][NUM_DAYS], int);
double findLeastTotal(double[][NUM_DAYS]);
double findGreatestTotal(double[][NUM_DAYS]);

int main()
{
	// Create a 2-D array to hold the pounds of food consumed 
	// by each monkey on each day of the week
	double food[NUM_MONKEYS][NUM_DAYS];

	// Call the getData function to input the data into the array
	getData(food);

	// Display the average amount of food the monkeys ate per day, and the 
	// least amount and greatest amount eaten all week by any one monkey.
	cout << "\n\nAverage amount of food eaten per day \n"
		 << "by the entire family of monkeys = "
		 << (findGroupTotal(food) / NUM_DAYS) << " pounds. \n\n";

	cout << "Least amount of food eaten during the week \n"
		 << "by any one monkey = " << findLeastTotal(food) << " pounds. \n\n"; 

	cout << "Greatest amount of food eaten during the week \n"
		 << "by any one monkey = " << findGreatestTotal(food) << " pounds. \n"; 

	return 0;
}

/*****************************************************
 *                   getData                         *
 * Fills the array with data.                        *
 *****************************************************/
void getData(double food[][NUM_DAYS])
{
	for (int monkey = 0; monkey < NUM_MONKEYS; monkey++)
	{
		cout << "\nEnter pounds of food eaten by monkey #"
			 << (monkey+1) << " on \n";
		for (int day = 0; day < NUM_DAYS; day++)
		{
			cout << "day " << (day+1) << ": ";
			cin  >> food[monkey][day];
			while (food[monkey][day] < 0.0)
			{
				cout << "food eaten cannot be less than 0. Please re-enter\n";
				cout << "day " << (day+1) << ": ";
				cin  >> food[monkey][day];
			}
		}
	}
}

/*****************************************************
 *                  findGroupTotal                   *
 * Returns the total of all values in the array.     *
 *****************************************************/
double findGroupTotal(double food[][NUM_DAYS])
{
	double total = 0.0;

	for (int monkey = 0; monkey < NUM_MONKEYS; monkey++)
	{
		for (int day = 0; day < NUM_DAYS; day++)
			total += food[monkey][day];
	}
	return total;
}


/*****************************************************
 *                    findOneTotal                   *
 * Finds and returns the amount of food eaten during *
 * the week by one particular monkey. It does this by*
 * totaling and returning the values in the one row  *
 * of the array representing the desired monkey.     *
 *****************************************************/
double findOneTotal (double food[][NUM_DAYS], int thisMonkey)
{
	double total = 0.0;

	for (int day = 0; day < NUM_DAYS; day++)
		total += food[thisMonkey][day];

	return total;
}
   
/*****************************************************
 *                   findLeastTotal                  *
 * Finds and returns the smallest row total.         *
 *****************************************************/  
double findLeastTotal (double food[][NUM_DAYS])
{
	double thisMonkeyTotal;
	double leastTotal;
   
    // Set leastTotal to the first monkey's total food consumption
	leastTotal= findOneTotal(food, 0);

	// Check if any other monkey consumed less food
	for (int thisMonkey = 1; thisMonkey < NUM_MONKEYS; thisMonkey++)
	{
		thisMonkeyTotal = findOneTotal(food, thisMonkey);
		if (thisMonkeyTotal < leastTotal)
			leastTotal = thisMonkeyTotal;
	}
	return leastTotal;
}

/*****************************************************
 *                findGreatestTotal                  *
 * Finds and returns the largest row total.          *
 *****************************************************/  
double findGreatestTotal (double food[][NUM_DAYS])

{
	double thisMonkeyTotal;
	double greatestTotal;

	// Set greatestTotal to the first monkey's total food consumption
	greatestTotal= findOneTotal(food, 0);

	// Check if any other monkey consumed more food
	for (int thisMonkey = 1; thisMonkey < NUM_MONKEYS; thisMonkey++)
	{
		thisMonkeyTotal = findOneTotal(food, thisMonkey);
		if (thisMonkeyTotal > greatestTotal)
			greatestTotal = thisMonkeyTotal;
	}
	return greatestTotal;
}

#include <iostream>
#include <iomanip>
#include <string>
using namespace std;
	
// Function prototypes
int getSalesData(string [], int []);
int posOfLargest(int []);
int posOfSmallest(int []);
void displayReport(string [], int [], int);

const int SIZE = 5;

int main()
{

	string name[SIZE] = {"mild  ", "medium", "sweet ", "hot   ", "zesty "}; 
	int sales[SIZE];   // Holds jars sold for each salsa type

	int totalJarsSold = getSalesData(name, sales);
	
	displayReport(name, sales, totalJarsSold);

  	return 0;
}

/************************************************************
 *                    getSalesData                          *
 * Accepts the sales figures for each salsa type and stores *
 * them in the array passed to the function, as well as     *
 * accumulating and returning the total of all salsas sold. *
 ************************************************************/
int getSalesData(string name[], int sales[])
{
	int total = 0;
	
	for (int type = 0; type < SIZE; type++)
	{
		cout << "Jars sold last month of " << name[type] << ": ";
		cin  >> sales[type];
      
		while (sales[type] < 0)
		{	cout << "Jars sold must be 0 or more.  Please re-enter: ";
			cin  >> sales[type];
		}
		
		total += sales[type];
	}
	return total;
}


/************************************************************
 *                    displayReport                         *
 * Displays the sales report using information from the     *
 * arrays passed to it.
 ************************************************************/
void displayReport(string name[], int sales[], int total)
{
	int hiSalesProduct = posOfLargest(sales);
	int loSalesProduct = posOfSmallest(sales);
	
	cout << "\n\n Salsa Sales Report \n\n";
	cout << "Name       Jars Sold \n";
	cout << "____________________\n";

	for (int type = 0; type < SIZE; type++)
		cout << name[type] << setw(11) << sales[type] << endl;

	cout << "\nTotal Sales: " << total << endl;
	cout << "High Seller: "   << name[hiSalesProduct] << endl;
	cout << "Low Seller : "   << name[loSalesProduct] << endl;
}

/************************************************************
 *                    posOfLargest                          *
 * Finds and returns the subscript of the array position    *
 * holding the largest value in the array passed to the     *
 * function.                                                *
 ************************************************************/
int posOfLargest(int array[])
{
	int indexOfLargest = 0;
   
	for (int pos = 1; pos < SIZE; pos++)
	{
		if (array[pos] > array[indexOfLargest])
			indexOfLargest = pos;
	}   
	return indexOfLargest;
}


/************************************************************
 *                    posOfSmallest                         *
 * Finds and returns the subscript of the array position    *
 * holding the smallest value in the array passed to the    *
 * function.                                                *
 ************************************************************/
int posOfSmallest(int array[])
{
	int indexOfSmallest = 0;
	
	for (int pos = 1; pos < SIZE; pos++)
	{
		if (array[pos] < array[indexOfSmallest])
			indexOfSmallest = pos;
	}		
	return indexOfSmallest;
}


include <iostream>

using namespace std;



// Function prototypes

int searchList(int[], int, int);



int main()

{

	const int ACCTS = 18;



	int List[ACCTS] = { 5658845, 4520125, 7895122, 8777541, 8451277, 1302850,

						8080152, 4562555, 5552012, 5050552, 7825877, 1250255,

						1005231, 6545231, 3852085, 7576651, 7881200, 4581002 };



	int AcctNum, 

		Result;



	// Ask the user to enter a number

	cout << "Enter your charge account number to determine if it is valid: ";

	cin  >> AcctNum;



	Result = searchList(List, ACCTS, AcctNum);

	if(Result == -1)

		cout << "Account number " << AcctNum << " is invalid.\n";

	else

		cout << "Account number " << List[Result] << " is valid\n";



	return 0;

}



/**********************************************************************

 *                              searchList                            *

 **********************************************************************/

int searchList(int list[], int size, int value)

{

	

	int index = 0,

	 	position = -1;

	bool found = false;



	while (!found && index < size)

	{

		if (list[index] == value)		// If the value is found

		{

			found = true;				// Set the flag	}

			position = index;

		}

		index++;

	}

	return position;

}

include <iostream>

using namespace std;



// Function Prototypes

int searchList(int [], int, int);



int main()

{

	const int NUMS = 10;

	int Picks[NUMS] = { 13579, 26791, 26792, 33445, 55555,

						62483, 77777, 79422, 85647, 93121 };



	int WinNums,		// Holds winning numbers

		Search;			// Holds search results



	// Ask user to enter a five-digit number

	cout << "Enter this weekâ€™s winning five-digit number: ";

	cin  >> WinNums;



	// Search the array for WinNums

	Search = searchList(Picks, NUMS, WinNums);



	// Report whether or not one of the tickets is a winner this week.

	if (Search == -1)

		cout << "Sorry, no winning ticket this week.\n";

	else

	{

		cout << "Congratulations!\nYou have the winning five-digit number: " 

			 << Picks[Search] << endl;

	}



	return 0;

}



/*******************************************************************************

 *                                    searchList                               *

 * This function performs a linear search on an integer array. The list array, *

 * which has size elements, is searched for the number stored in value. If the *

 * number is found, its array subscript is returned. Otherwise -1 is returned. *

 *******************************************************************************/

int searchList(int list[], int size, int value)

{

	int index = 0;			// Used as a subscript to search array

	int position = -1;		// Used to record position of search value

	bool found = false;		// Flag to indecate if the value was found



	while (index < size && !found)

	{

		if (list[index] == value)	// If the value is found

		{

			position = index;		// Record the value's subscript

			found = true;			// Set flag

		}

		index++;					// Go to next element

	}

	return position;				// Return the position, or -1
}

include<iostream>
#include<cstdlib>
using namespace std;




char square[11]={'0','1','2','3','4','5','6','7','8','9','\0'};
void board();
int win();



int main()
{

char playagain='y';
while(playagain=='y')
{
cout<<"Welcome in my Tic Tac Toe!!!\n\n\n"<<endl;
int player=1;
int i,choice;
char mark;

do
{

board();
player=(player%2)?1:2;
cout<<"Player "<<player<<" enter a number: ";
cin>>choice;
mark=(player==1)?'X':'O';

if(choice==1 && square[1]=='1')
square[1]=mark;

else if (choice == 2 && square[2] == '2')

square[2] = mark;
else if (choice == 3 && square[3] == '3')

square[3] = mark;
else if (choice == 4 && square[4] == '4')

square[4] = mark;
else if (choice == 5 && square[5] == '5')

square[5] = mark;
else if (choice == 6 && square[6] == '6')

square[6] = mark;
else if (choice == 7 && square[7] == '7')

square[7] = mark;
else if (choice == 8 && square[8] == '8')

square[8] = mark;
else if (choice == 9 && square[9] == '9')

square[9] = mark;
else
{
cout<<"\nINVALID MOVE \n\n";
player--;

}
i=win();
player++;
}while(i==-1);
board();
if(i==1)
cout<<"Player"<<--player<<" win";
if(i==0)
cout<<"Game draw";



cout<<"\n\nWanna play again(y/n)?:";
cin>>playagain;
cout<<endl;

if(playagain=='y')
{
cout<<"You choice to play again\n\n";
}
else if(playagain=='n')
{
cout<<"You choice not to play again\n\n";
}
else
{
cout<<"You didnt put an valid character so i will take it like(n),so the program will close.\n\n";
}

for(int c=0;c<40;c++)
{
cout<<"****";
}
cout<<endl;

square[1] = '1';
square[2] = '2';
square[3] = '3';
square[4] = '4';
square[5] = '5';
square[6] = '6';
square[7] = '7';
square[8] = '8';
square[9] = '9';
}
}

int win()
{
if(square[1]==square[2]&&square[2]==square[3])
return 1;

else if(square[4]==square[5]&&square[5]==square[6])
return 1;

else if(square[7]==square[8]&&square[8]==square[9])
return 1;

else if(square[1]==square[4]&&square[4]==square[7])
return 1;

else if(square[2]==square[5]&&square[5]==square[8])
return 1;

else if(square[3]==square[6]&&square[6]==square[9])
return 1;

else if(square[1]==square[5]&&square[5]==square[9])
return 1;

else if(square[3]==square[5]&&square[5]==square[7])
return 1;

else if (square[1] != '1' && square[2] != '2' && square[3] != '3' && square[4] != '4'&&square[5] != '5'
&& square[6] != '6' && square[7] != '7' && square[8] != '8' && square[9] != '9')
return 0;

else
return -1;

}

void board()
{


cout<<"\tTic Tac Toe\t\t\n\n";
cout<<"PLAYER 1(X) , PLAYER 2(O)\n\n";
cout<<square[1]<<"|"<<square[2]<<"|"<<square[3]<<endl;
cout<<"-----"<<endl;
cout<<square[4]<<"|"<<square[5]<<"|"<<square[6]<<endl;
cout<<"-----"<<endl;
cout<<square[7]<<"|"<<square[8]<<"|"<<square[9]<<endl;


}




